#if !defined(AFX_QMARKEZDWND_H__ED5E12F7_5405_41DD_9E35_1463ABFE6048__INCLUDED_)
#define AFX_QMARKEZDWND_H__ED5E12F7_5405_41DD_9E35_1463ABFE6048__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////

class CMarkEzd;
class AFX_EXT_CLASS CQMarkEzdWnd : public CStatic
{
// Construction
public:
	CQMarkEzdWnd();

private:
	CMarkEzd *m_pMarkEzd;
	CBitmap *m_pBitMap;


// Operations
public:
	/************************************************************************/
	// Lmc1板卡初始化函数，CQMarkEzdWnd的所有实例调用一次即可
	/************************************************************************/
	BOOL Lmc1_Initial(HWND hOwnerWnd, BOOL bTestMode=FALSE);

	/************************************************************************/
	// 加载本地Ezd文件到内存
	/************************************************************************/
	BOOL Lmc1_LoadEzdFile(CString strEzdPath); 

	/************************************************************************/
	// 标刻当前数据库所有对象
	/************************************************************************/
	BOOL Lmc1_Mark(BOOL bFly=FALSE);

	/************************************************************************/
	// 标刻指定的实体列表
	/************************************************************************/
	BOOL Lmc1_MarkList(const CStringArray &strEntList, BOOL bFly=FALSE);

	/************************************************************************/
	// 标刻单个实体
	/************************************************************************/
	BOOL Lmc1_MarkEntity(CString strEntity, BOOL bFly=FALSE);

	/************************************************************************/
	// 停止标刻
	/************************************************************************/
	BOOL Lmc1_StopMark(void);

	/************************************************************************/
	// 改变文本内容
	/************************************************************************/
	BOOL Lmc1_ChangeTextByName(CString strObjName, CString strObjText);

	/************************************************************************/
	// 将某个端口置为高电平
	/************************************************************************/
	BOOL Lmc1_OutPortHigh(int nPort);

	/************************************************************************/
	// 将某个端口置为低电平
	/************************************************************************/
	BOOL Lmc1_OutPortLow(int nPort);

	/************************************************************************
	* 在某个端口输出上升沿
	************************************************************************/
	BOOL Lmc1_OutPortUp(int nPort, int nLowMs=100);

	/************************************************************************
	* 在某个端口输出下降沿
	************************************************************************/
	BOOL Lmc1_OutPortDown(int nPort, int nHighMs=100);

	/************************************************************************/
	// 读取某个输入端口状态，1：高电平，0：低电平，-1：失败
	/************************************************************************/
	int Lmc1_ReadPort(int nPort);

	/************************************************************************/
	// 等待某个端口高电平，成功返回1，超时返回0，失败返回-1
	/************************************************************************/
	int Lmc1_WaitPortHigh(int nPort, int nTimeoutSecond=3);

	/************************************************************************/
	// 等待某个端口低电平，成功返回1，超时返回0，失败返回-1
	/************************************************************************/
	int Lmc1_WaitPortLow(int nPort, int nTimeoutSecond=3);

	/************************************************************************/
	// 等待某个端口上升沿，成功返回1，超时返回0，失败返回-1
	/************************************************************************/
	int Lmc1_WaitPortUp(int nPort, int nTimeoutSecond=3);

	/************************************************************************/
	// 等待某个端口下降沿，成功返回1，超时返回0，失败返回-1
	/************************************************************************/
	int Lmc1_WaitPortDown(int nPort, int nTimeoutSecond=3);

	/************************************************************************
	* 删除某个实体对象
	************************************************************************/
	BOOL Lmc1_DeleteEnt(CString strObjName);

	/************************************************************************/
	// 返回lmc1函数最后一次返回值
	/************************************************************************/
	int GetLmc1Ret(void);

// Overrides
	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CQMarkEzdWnd)
	//}}AFX_VIRTUAL

// Implementation
public:
	virtual ~CQMarkEzdWnd();

	// Generated message map functions
protected:
	//{{AFX_MSG(CQMarkEzdWnd)
	afx_msg void OnPaint();
	afx_msg void OnSize(UINT nType, int cx, int cy);
	//}}AFX_MSG

	DECLARE_MESSAGE_MAP()

private:
	BOOL UpdateBitmap(void);

};

/////////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_QMARKEZDWND_H__ED5E12F7_5405_41DD_9E35_1463ABFE6048__INCLUDED_)
